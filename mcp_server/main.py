# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:45:13+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Path, Query
from pydantic import conint

from models import (
    Accounts,
    AccountSummaries,
    AccountTicket,
    AccountTreeRequest,
    AccountTreeResponse,
    Alt,
    AnalyticsDataimportDeleteUploadDataRequest,
    Columns,
    CustomDataSources,
    CustomDimension,
    CustomDimensions,
    CustomMetric,
    CustomMetrics,
    EntityAdWordsLink,
    EntityAdWordsLinks,
    EntityUserLink,
    EntityUserLinks,
    Experiment,
    Experiments,
    Filter,
    Filters,
    GaData,
    Goal,
    Goals,
    HashClientIdRequest,
    HashClientIdResponse,
    McfData,
    Output,
    Profile,
    ProfileFilterLink,
    ProfileFilterLinks,
    Profiles,
    RealtimeData,
    RemarketingAudience,
    RemarketingAudiences,
    SamplingLevel,
    Segments,
    UnsampledReport,
    UnsampledReports,
    Upload,
    Uploads,
    UserDeletionRequest,
    Webproperties,
    Webproperty,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com', 'x-twitter': 'youtube'},
    description='Views and manages your Google Analytics data.',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='Google Analytics API',
    version='v3',
    servers=[{'url': 'https://analytics.googleapis.com/analytics/v3'}],
)


@app.get(
    '/data/ga',
    description=""" Returns Analytics data for a view (profile). """,
    tags=['analytics_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_data_ga_get(
    ids: str,
    start_date: str = Query(..., alias='start-date'),
    end_date: str = Query(..., alias='end-date'),
    metrics: str = ...,
    dimensions: Optional[str] = None,
    filters: Optional[str] = None,
    include_empty_rows: Optional[bool] = Query(None, alias='include-empty-rows'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    output: Optional[Output] = None,
    sampling_level: Optional[SamplingLevel] = Query(None, alias='samplingLevel'),
    segment: Optional[str] = None,
    sort: Optional[str] = None,
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/data/mcf',
    description=""" Returns Analytics Multi-Channel Funnels data for a view (profile). """,
    tags=['analytics_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_data_mcf_get(
    ids: str,
    start_date: str = Query(..., alias='start-date'),
    end_date: str = Query(..., alias='end-date'),
    metrics: str = ...,
    dimensions: Optional[str] = None,
    filters: Optional[str] = None,
    max_results: Optional[int] = Query(None, alias='max-results'),
    sampling_level: Optional[SamplingLevel] = Query(None, alias='samplingLevel'),
    sort: Optional[str] = None,
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/data/realtime',
    description=""" Returns real time data for a view (profile). """,
    tags=['analytics_data_retrieval', 'analytics_metadata_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_data_realtime_get(
    ids: str,
    metrics: str = ...,
    dimensions: Optional[str] = None,
    filters: Optional[str] = None,
    max_results: Optional[int] = Query(None, alias='max-results'),
    sort: Optional[str] = None,
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accountSummaries',
    description=""" Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access. """,
    tags=['analytics_data_retrieval', 'analytics_metadata_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_account_summaries_list(
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts',
    description=""" Lists all accounts to which the user has access. """,
    tags=['analytics_metadata_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_accounts_list(
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/entityUserLinks',
    description=""" Lists account-user links for a given account. """,
    tags=['analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_account_user_links_list(
    account_id: str = Path(..., alias='accountId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/entityUserLinks',
    description=""" Adds a new user to the given account. """,
    tags=['analytics_account_management', 'analytics_user_permission_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_account_user_links_insert(
    account_id: str = Path(..., alias='accountId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: EntityUserLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/management/accounts/{accountId}/entityUserLinks/{linkId}',
    description=""" Removes a user from the given account. """,
    tags=['analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_account_user_links_delete(
    account_id: str = Path(..., alias='accountId'),
    link_id: str = Path(..., alias='linkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/entityUserLinks/{linkId}',
    description=""" Updates permissions for an existing user on the given account. """,
    tags=['analytics_user_permission_management', 'analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_account_user_links_update(
    account_id: str = Path(..., alias='accountId'),
    link_id: str = Path(..., alias='linkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: EntityUserLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/filters',
    description=""" Lists all filters for an account """,
    tags=['analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_filters_list(
    account_id: str = Path(..., alias='accountId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/filters',
    description=""" Create a new filter. """,
    tags=['analytics_filter_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_filters_insert(
    account_id: str = Path(..., alias='accountId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Filter = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/management/accounts/{accountId}/filters/{filterId}',
    description=""" Delete a filter. """,
    tags=['analytics_filter_management', 'analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_filters_delete(
    account_id: str = Path(..., alias='accountId'),
    filter_id: str = Path(..., alias='filterId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/filters/{filterId}',
    description=""" Returns filters to which the user has access. """,
    tags=['analytics_filter_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_filters_get(
    account_id: str = Path(..., alias='accountId'),
    filter_id: str = Path(..., alias='filterId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/management/accounts/{accountId}/filters/{filterId}',
    description=""" Updates an existing filter. This method supports patch semantics. """,
    tags=['analytics_filter_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_filters_patch(
    account_id: str = Path(..., alias='accountId'),
    filter_id: str = Path(..., alias='filterId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Filter = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/filters/{filterId}',
    description=""" Updates an existing filter. """,
    tags=['analytics_filter_management', 'analytics_profile_filter_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_filters_update(
    account_id: str = Path(..., alias='accountId'),
    filter_id: str = Path(..., alias='filterId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Filter = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties',
    description=""" Lists web properties to which the user has access. """,
    tags=['analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_webproperties_list(
    account_id: str = Path(..., alias='accountId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties',
    description=""" Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile. """,
    tags=['analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_webproperties_insert(
    account_id: str = Path(..., alias='accountId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Webproperty = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}',
    description=""" Gets a web property to which the user has access. """,
    tags=['analytics_account_management', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_webproperties_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}',
    description=""" Updates an existing web property. This method supports patch semantics. """,
    tags=['analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_webproperties_patch(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Webproperty = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}',
    description=""" Updates an existing web property. """,
    tags=['analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_webproperties_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Webproperty = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources',
    description=""" List custom data sources to which the user has access. """,
    tags=['analytics_data_retrieval', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_data_sources_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    max_results: Optional[conint(ge=1)] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData',
    description=""" Delete data associated with a previous upload. """,
    tags=[
        'analytics_data_uploads_management',
        'analytics_custom_dimensions_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_uploads_delete_upload_data(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    custom_data_source_id: str = Path(..., alias='customDataSourceId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: AnalyticsDataimportDeleteUploadDataRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads',
    description=""" List uploads to which the user has access. """,
    tags=['analytics_data_retrieval', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_uploads_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    custom_data_source_id: str = Path(..., alias='customDataSourceId'),
    max_results: Optional[conint(ge=1)] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads',
    description=""" Upload data for a custom data source. """,
    tags=['analytics_account_management', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_uploads_upload_data(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    custom_data_source_id: str = Path(..., alias='customDataSourceId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}',
    description=""" List uploads to which the user has access. """,
    tags=['analytics_data_uploads_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_uploads_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    custom_data_source_id: str = Path(..., alias='customDataSourceId'),
    upload_id: str = Path(..., alias='uploadId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions',
    description=""" Lists custom dimensions to which the user has access. """,
    tags=['analytics_data_retrieval', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_dimensions_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions',
    description=""" Create a new custom dimension. """,
    tags=['analytics_custom_dimensions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_dimensions_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: CustomDimension = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}',
    description=""" Get a custom dimension to which the user has access. """,
    tags=['analytics_custom_dimensions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_dimensions_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    custom_dimension_id: str = Path(..., alias='customDimensionId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}',
    description=""" Updates an existing custom dimension. This method supports patch semantics. """,
    tags=['analytics_custom_dimensions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_dimensions_patch(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    custom_dimension_id: str = Path(..., alias='customDimensionId'),
    ignore_custom_data_source_links: Optional[bool] = Query(
        None, alias='ignoreCustomDataSourceLinks'
    ),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: CustomDimension = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}',
    description=""" Updates an existing custom dimension. """,
    tags=['analytics_custom_dimensions_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_dimensions_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    custom_dimension_id: str = Path(..., alias='customDimensionId'),
    ignore_custom_data_source_links: Optional[bool] = Query(
        None, alias='ignoreCustomDataSourceLinks'
    ),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: CustomDimension = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics',
    description=""" Lists custom metrics to which the user has access. """,
    tags=['analytics_data_retrieval', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_metrics_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics',
    description=""" Create a new custom metric. """,
    tags=['analytics_custom_metrics_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_metrics_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: CustomMetric = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}',
    description=""" Get a custom metric to which the user has access. """,
    tags=['analytics_custom_metrics_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_metrics_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    custom_metric_id: str = Path(..., alias='customMetricId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}',
    description=""" Updates an existing custom metric. This method supports patch semantics. """,
    tags=['analytics_custom_metrics_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_metrics_patch(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    custom_metric_id: str = Path(..., alias='customMetricId'),
    ignore_custom_data_source_links: Optional[bool] = Query(
        None, alias='ignoreCustomDataSourceLinks'
    ),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: CustomMetric = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}',
    description=""" Updates an existing custom metric. """,
    tags=['analytics_custom_metrics_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_custom_metrics_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    custom_metric_id: str = Path(..., alias='customMetricId'),
    ignore_custom_data_source_links: Optional[bool] = Query(
        None, alias='ignoreCustomDataSourceLinks'
    ),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: CustomMetric = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks',
    description=""" Lists webProperty-Google Ads links for a given web property. """,
    tags=['analytics_data_retrieval', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_web_property_ad_words_links_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks',
    description=""" Creates a webProperty-Google Ads link. """,
    tags=['analytics_adwords_links_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_web_property_ad_words_links_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: EntityAdWordsLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}',
    description=""" Deletes a web property-Google Ads link. """,
    tags=['analytics_adwords_links_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_web_property_ad_words_links_delete(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    web_property_ad_words_link_id: str = Path(..., alias='webPropertyAdWordsLinkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}',
    description=""" Returns a web property-Google Ads link to which the user has access. """,
    tags=['analytics_adwords_links_management', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_web_property_ad_words_links_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    web_property_ad_words_link_id: str = Path(..., alias='webPropertyAdWordsLinkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}',
    description=""" Updates an existing webProperty-Google Ads link. This method supports patch semantics. """,
    tags=['analytics_adwords_links_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_web_property_ad_words_links_patch(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    web_property_ad_words_link_id: str = Path(..., alias='webPropertyAdWordsLinkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: EntityAdWordsLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}',
    description=""" Updates an existing webProperty-Google Ads link. """,
    tags=['analytics_adwords_links_management', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_web_property_ad_words_links_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    web_property_ad_words_link_id: str = Path(..., alias='webPropertyAdWordsLinkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: EntityAdWordsLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks',
    description=""" Lists webProperty-user links for a given web property. """,
    tags=['analytics_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_webproperty_user_links_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks',
    description=""" Adds a new user to the given web property. """,
    tags=['analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_webproperty_user_links_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: EntityUserLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}',
    description=""" Removes a user from the given web property. """,
    tags=['analytics_account_management', 'analytics_adwords_links_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_webproperty_user_links_delete(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    link_id: str = Path(..., alias='linkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}',
    description=""" Updates permissions for an existing user on the given web property. """,
    tags=['analytics_account_management', 'analytics_user_permission_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_webproperty_user_links_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    link_id: str = Path(..., alias='linkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: EntityUserLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles',
    description=""" Lists views (profiles) to which the user has access. """,
    tags=['analytics_data_retrieval', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profiles_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles',
    description=""" Create a new view (profile). """,
    tags=['analytics_profiles_management', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profiles_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Profile = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}',
    description=""" Deletes a view (profile). """,
    tags=[
        'analytics_account_management',
        'analytics_web_properties_management',
        'analytics_profiles_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profiles_delete(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}',
    description=""" Gets a view (profile) to which the user has access. """,
    tags=['analytics_profiles_management', 'analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profiles_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}',
    description=""" Updates an existing view (profile). This method supports patch semantics. """,
    tags=['analytics_profiles_management', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profiles_patch(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Profile = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}',
    description=""" Updates an existing view (profile). """,
    tags=['analytics_profiles_management', 'analytics_web_properties_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profiles_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Profile = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks',
    description=""" Lists profile-user links for a given view (profile). """,
    tags=['analytics_data_retrieval', 'analytics_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profile_user_links_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks',
    description=""" Adds a new user to the given view (profile). """,
    tags=['analytics_user_permission_management', 'analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profile_user_links_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: EntityUserLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}',
    description=""" Removes a user from the given view (profile). """,
    tags=[
        'analytics_user_permission_management',
        'analytics_profiles_management',
        'analytics_adwords_links_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profile_user_links_delete(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    link_id: str = Path(..., alias='linkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}',
    description=""" Updates permissions for an existing user on the given view (profile). """,
    tags=['analytics_user_permission_management', 'analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profile_user_links_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    link_id: str = Path(..., alias='linkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: EntityUserLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments',
    description=""" Lists experiments to which the user has access. """,
    tags=['analytics_data_retrieval', 'analytics_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_experiments_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments',
    description=""" Create a new experiment. """,
    tags=['analytics_experiment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_experiments_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Experiment = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}',
    description=""" Delete an experiment. """,
    tags=['analytics_experiment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_experiments_delete(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    experiment_id: str = Path(..., alias='experimentId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}',
    description=""" Returns an experiment to which the user has access. """,
    tags=['analytics_experiment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_experiments_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    experiment_id: str = Path(..., alias='experimentId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}',
    description=""" Update an existing experiment. This method supports patch semantics. """,
    tags=['analytics_experiment_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_experiments_patch(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    experiment_id: str = Path(..., alias='experimentId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Experiment = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}',
    description=""" Update an existing experiment. """,
    tags=['analytics_experiment_management', 'analytics_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_experiments_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    experiment_id: str = Path(..., alias='experimentId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Experiment = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals',
    description=""" Lists goals to which the user has access. """,
    tags=['analytics_data_retrieval', 'analytics_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_goals_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals',
    description=""" Create a new goal. """,
    tags=['analytics_goals_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_goals_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Goal = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}',
    description=""" Gets a goal to which the user has access. """,
    tags=['analytics_goals_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_goals_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    goal_id: str = Path(..., alias='goalId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}',
    description=""" Updates an existing goal. This method supports patch semantics. """,
    tags=['analytics_goals_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_goals_patch(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    goal_id: str = Path(..., alias='goalId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Goal = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}',
    description=""" Updates an existing goal. """,
    tags=['analytics_goals_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_goals_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    goal_id: str = Path(..., alias='goalId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: Goal = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks',
    description=""" Lists all profile filter links for a profile. """,
    tags=['analytics_data_retrieval', 'analytics_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profile_filter_links_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks',
    description=""" Create a new profile filter link. """,
    tags=['analytics_profile_filter_management', 'analytics_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profile_filter_links_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: ProfileFilterLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}',
    description=""" Delete a profile filter link. """,
    tags=[
        'analytics_adwords_links_management',
        'analytics_user_permission_management',
        'analytics_profiles_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profile_filter_links_delete(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    link_id: str = Path(..., alias='linkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}',
    description=""" Returns a single profile filter link. """,
    tags=[
        'analytics_user_permission_management',
        'analytics_adwords_links_management',
        'analytics_accounts_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profile_filter_links_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    link_id: str = Path(..., alias='linkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}',
    description=""" Update an existing profile filter link. This method supports patch semantics. """,
    tags=['analytics_profile_filter_management', 'analytics_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profile_filter_links_patch(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    link_id: str = Path(..., alias='linkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: ProfileFilterLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}',
    description=""" Update an existing profile filter link. """,
    tags=['analytics_profile_filter_management', 'analytics_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_profile_filter_links_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    link_id: str = Path(..., alias='linkId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: ProfileFilterLink = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports',
    description=""" Lists unsampled reports to which the user has access. """,
    tags=['analytics_data_retrieval', 'analytics_profiles_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_unsampled_reports_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports',
    description=""" Create a new unsampled report. """,
    tags=['analytics_unsampled_reports_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_unsampled_reports_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: UnsampledReport = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}',
    description=""" Deletes an unsampled report. """,
    tags=['analytics_unsampled_reports_management', 'analytics_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_unsampled_reports_delete(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    unsampled_report_id: str = Path(..., alias='unsampledReportId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}',
    description=""" Returns a single unsampled report. """,
    tags=['analytics_unsampled_reports_management', 'analytics_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_unsampled_reports_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    profile_id: str = Path(..., alias='profileId'),
    unsampled_report_id: str = Path(..., alias='unsampledReportId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences',
    description=""" Lists remarketing audiences to which the user has access. """,
    tags=['analytics_metadata_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_remarketing_audience_list(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    type: Optional[str] = None,
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences',
    description=""" Creates a new remarketing audience. """,
    tags=['analytics_remarketing_audience_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_remarketing_audience_insert(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: RemarketingAudience = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}',
    description=""" Delete a remarketing audience. """,
    tags=['analytics_remarketing_audience_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_remarketing_audience_delete(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    remarketing_audience_id: str = Path(..., alias='remarketingAudienceId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}',
    description=""" Gets a remarketing audience to which the user has access. """,
    tags=['analytics_remarketing_audience_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_remarketing_audience_get(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    remarketing_audience_id: str = Path(..., alias='remarketingAudienceId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}',
    description=""" Updates an existing remarketing audience. This method supports patch semantics. """,
    tags=['analytics_remarketing_audience_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_remarketing_audience_patch(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    remarketing_audience_id: str = Path(..., alias='remarketingAudienceId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: RemarketingAudience = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}',
    description=""" Updates an existing remarketing audience. """,
    tags=['analytics_remarketing_audience_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_remarketing_audience_update(
    account_id: str = Path(..., alias='accountId'),
    web_property_id: str = Path(..., alias='webPropertyId'),
    remarketing_audience_id: str = Path(..., alias='remarketingAudienceId'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: RemarketingAudience = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/management/clientId:hashClientId',
    description=""" Hashes the given Client ID. """,
    tags=['analytics_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_client_id_hash_client_id(
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: HashClientIdRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/management/segments',
    description=""" Lists segments to which the user has access. """,
    tags=['analytics_data_retrieval', 'analytics_metadata_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_management_segments_list(
    max_results: Optional[int] = Query(None, alias='max-results'),
    start_index: Optional[conint(ge=1)] = Query(None, alias='start-index'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/metadata/{reportType}/columns',
    description=""" Lists all columns for a report type """,
    tags=['analytics_metadata_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_metadata_columns_list(
    report_type: str = Path(..., alias='reportType'),
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/provisioning/createAccountTicket',
    description=""" Creates an account ticket. """,
    tags=['analytics_account_provisioning'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_provisioning_create_account_ticket(
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: AccountTicket = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/provisioning/createAccountTree',
    description=""" Provision account. """,
    tags=['analytics_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_provisioning_create_account_tree(
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: AccountTreeRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/userDeletion/userDeletionRequests:upsert',
    description=""" Insert or update a user deletion requests. """,
    tags=['analytics_user_deletion_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def analytics_user_deletion_user_deletion_request_upsert(
    alt: Optional[Alt] = None,
    fields: Optional[str] = None,
    key: Optional[str] = None,
    oauth_token: Optional[str] = None,
    pretty_print: Optional[bool] = Query(None, alias='prettyPrint'),
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    user_ip: Optional[str] = Query(None, alias='userIp'),
    body: UserDeletionRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
